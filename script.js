const tg = window.Telegram.WebApp;
tg.expand(); // –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º Web App

const tracks = [
    { name: "–¢—Ä–µ–∫ 1", src: "track1.mp3", cover: "cover1.jpg" },
    { name: "–¢—Ä–µ–∫ 2", src: "track2.mp3", cover: "cover2.jpg" },
    { name: "–¢—Ä–µ–∫ 3", src: "track3.mp3", cover: "cover3.jpg" }
];

let currentTrack = 0;

const audio = document.getElementById("audio");
const playButton = document.getElementById("play");
const prevButton = document.getElementById("prev");
const nextButton = document.getElementById("next");
const progressBar = document.getElementById("progress-bar");
const trackName = document.getElementById("track-name");
const coverImage = document.getElementById("cover-image");

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–µ–∫–∞
function loadTrack(index) {
    let track = tracks[index];
    audio.src = track.src;
    trackName.textContent = track.name;
    coverImage.src = track.cover;
}

playButton.addEventListener("click", () => {
    if (audio.paused) {
        audio.play();
        playButton.textContent = "‚è∏";
    } else {
        audio.pause();
        playButton.textContent = "‚ñ∂Ô∏è";
    }
});

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç—Ä–µ–∫–æ–≤
prevButton.addEventListener("click", () => {
    currentTrack = (currentTrack - 1 + tracks.length) % tracks.length;
    loadTrack(currentTrack);
    audio.play();
    playButton.textContent = "‚è∏";
});

nextButton.addEventListener("click", () => {
    currentTrack = (currentTrack + 1) % tracks.length;
    loadTrack(currentTrack);
    audio.play();
    playButton.textContent = "‚è∏";
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
audio.addEventListener("timeupdate", () => {
    progressBar.value = (audio.currentTime / audio.duration) * 100;
});

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–º–µ–Ω–∞ —Ç–µ–º—ã
function applyTheme() {
    const theme = tg.colorScheme; // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–º—É Telegram
    if (theme === "dark") {
        document.body.style.background = "#121212";
        document.body.style.color = "white";
    } else {
        document.body.style.background = "white";
        document.body.style.color = "black";
    }
}

tg.onEvent("themeChanged", applyTheme);
applyTheme();

const API_KEY = "AIzaSyAfPUTsUK8qfz-ROO6PIXih7eN2K0MqREk"; // –í—Å—Ç–∞–≤—å —Å—é–¥–∞ API-–∫–ª—é—á
const searchQuery = "Imagine Dragons Believer"; // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –≤—Å—Ç–∞–≤–ª—è—Ç—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å

async function fetchYouTubeVideo() {
    const url = https://www.googleapis.com/youtube/v3/search?part=snippet&q=${encodeURIComponent(searchQuery)}&key=${API_KEY}&type=video;
    const response = await fetch(url);
    const data = await response.json();
    
    if (data.items.length > 0) {
        const videoId = data.items[0].id.videoId;
        const videoUrl = https://www.youtube.com/watch?v=${videoId};
        console.log("–ù–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ:", videoUrl);

        loadYouTubeAudio(videoId);
    } else {
        console.error("–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ");
    }
}

function loadYouTubeAudio(videoId) {
    const audioPlayer = document.getElementById("audio");
    audioPlayer.src = https://www.youtube.com/embed/${videoId}?autoplay=1&controls=0&loop=1&playlist=${videoId};
}

// –í—ã–∑—ã–≤–∞–µ–º –ø–æ–∏—Å–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
fetchYouTubeVideo();

document.getElementById("searchBtn").addEventListener("click", () => {
    const userQuery = document.getElementById("search").value;
    if (userQuery) {
        fetchYouTubeVideo(userQuery);
    }
});

function showLoading() {
    document.getElementById("searchBtn").textContent = "‚è≥ –ü–æ–∏—Å–∫...";
}

function hideLoading() {
    document.getElementById("searchBtn").textContent = "üîç –ù–∞–π—Ç–∏";
}

document.getElementById("searchBtn").addEventListener("click", () => {
    const userQuery = document.getElementById("search").value;
    if (userQuery) {
        showLoading();
        fetchYouTubeVideo(userQuery).then(hideLoading);
    }
});

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–≤—ã–π —Ç—Ä–µ–∫
loadTrack(currentTrack);
